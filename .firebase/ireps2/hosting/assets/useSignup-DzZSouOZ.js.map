{"version":3,"file":"useSignup-DzZSouOZ.js","sources":["../../src/hooks/useSignup.jsx"],"sourcesContent":["import {\r\n\tEmailAuthProvider,\r\n\tcreateUserWithEmailAndPassword,\r\n\treauthenticateWithCredential,\r\n\tsendEmailVerification,\r\n\tupdateEmail,\r\n\tupdateProfile,\r\n} from \"firebase/auth\";\r\nimport { doc, setDoc, Timestamp, updateDoc } from \"firebase/firestore\";\r\nimport { useReducer } from \"react\";\r\n\r\nimport { auth, db, functions } from \"@/firebaseConfig/fbConfig\";\r\nimport useAuthContext from \"@/hooks/useAuthContext\";\r\nimport { httpsCallable } from \"firebase/functions\";\r\n\r\nconst initSignup = {\r\n\terror: null,\r\n\tisPending: null,\r\n\tsuccess: null,\r\n\totpSent: false,\r\n\totpSentConformation: null,\r\n\tuser: null,\r\n};\r\n\r\nconst signupReducer = (state, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase \"IS_PENDING\":\r\n\t\t\t// console.log(`IS_PENDING action: `, action);\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\terror: \"\",\r\n\t\t\t\tisPending: true,\r\n\t\t\t\tsuccess: false,\r\n\t\t\t};\r\n\t\tcase \"OTP_SENT\":\r\n\t\t\t// console.log(`OTP_SENT: `, action);\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\totpSent: true,\r\n\t\t\t\totpSentConformation: action.payload,\r\n\t\t\t};\r\n\t\tcase \"SUCCESS\":\r\n\t\t\t// console.log(`SUCCESS: `, action);\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\terror: \"\",\r\n\t\t\t\tisPending: false,\r\n\t\t\t\tsuccess: true,\r\n\t\t\t};\r\n\t\tcase \"ERROR\":\r\n\t\t\t// console.log(`ERROR: `, action);\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\terror: action.payload,\r\n\t\t\t\tisPending: false,\r\n\t\t\t\tsuccess: false,\r\n\t\t\t};\r\n\t\tcase \"SAVE_USER\":\r\n\t\t\t// console.log(`ERROR: `, action);\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tuser: action.payload,\r\n\t\t\t};\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\nexport const useSignup = () => {\r\n\tconst [signupState, signupDispatch] = useReducer(signupReducer, initSignup);\r\n\t// console.log(`signupState`, signupState);\r\n\tconst { user, dispatch } = useAuthContext();\r\n\t// console.log(`user`, user);\r\n\r\n\tconst signup = async (userCredentials) => {\r\n\t\t// console.log(`userCredentials`, userCredentials);\r\n\t\tconst {\r\n\t\t\tsurname,\r\n\t\t\tname,\r\n\t\t\tpassword,\r\n\t\t\temail,\r\n\t\t\tphoneNumber,\r\n\t\t\t// nickName,\r\n\t\t\t// companyName,\r\n\t\t\t// spId,\r\n\t\t\tworkbase,\r\n\t\t} = userCredentials;\r\n\t\ttry {\r\n\t\t\tsignupDispatch({ type: \"IS_PENDING\" });\r\n\t\t\tconst result = await createUserWithEmailAndPassword(\r\n\t\t\t\tauth,\r\n\t\t\t\temail,\r\n\t\t\t\tpassword\r\n\t\t\t);\r\n\t\t\tif (!result) {\r\n\t\t\t\tthrow new Error(\"User signup failed\");\r\n\t\t\t}\r\n\t\t\t// console.log(`result`, result);\r\n\r\n\t\t\tconst { user } = result;\r\n\t\t\t// console.log(`user`, user);\r\n\r\n\t\t\tconst idToken = await auth.currentUser.getIdTokenResult(true);\r\n\t\t\t// console.log(`idToken`, idToken);\r\n\r\n\t\t\t// send emil verification\r\n\t\t\tawait sendEmailVerification(user);\r\n\r\n\t\t\t// update displayName details at firebase auth user. Use first letter of surname and name as dispalyName\r\n\t\t\tawait updateProfile(auth.currentUser, {\r\n\t\t\t\tdisplayName: `${name} ${surname}`,\r\n\t\t\t});\r\n\r\n\t\t\t// update claims with workbase using onCall cloud function\r\n\t\t\tconst updateUserWorkbase = await httpsCallable(\r\n\t\t\t\tfunctions,\r\n\t\t\t\t\"updateUserWorkbase\"\r\n\t\t\t);\r\n\t\t\t// console.log(`updateUserWorkbase`, updateUserWorkbase);\r\n\r\n\t\t\t// console.log(`workbase`, workbase);\r\n\t\t\tconst wbResult = await updateUserWorkbase({\r\n\t\t\t\troles: {\r\n\t\t\t\t\tworkbase,\r\n\t\t\t\t},\r\n\t\t\t});\r\n\t\t\t// console.log(`wbResult`, wbResult);\r\n\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: \"SIGNIN\",\r\n\t\t\t\tpayload: {\r\n\t\t\t\t\t...user,\r\n\t\t\t\t\tclaims: idToken.claims.roles,\r\n\t\t\t\t},\r\n\t\t\t});\r\n\r\n\t\t\t// TODO:create user profile in firestore using UID as the unique identifier\r\n\t\t\tconst docRef = doc(db, \"users\", user.uid);\r\n\t\t\tconst datetime = Timestamp.now();\r\n\t\t\tawait setDoc(docRef, {\r\n\t\t\t\tsurname,\r\n\t\t\t\tname,\r\n\t\t\t\temail,\r\n\t\t\t\tphoneNumber,\r\n\t\t\t\tworkbase,\r\n\t\t\t\t// nickName,\r\n\t\t\t\t// companyName,\r\n\t\t\t\t// spId,\r\n\t\t\t\tmetadata: {\r\n\t\t\t\t\tcreatedByName: `${surname} ${name}`,\r\n\t\t\t\t\tcreatedByUid: user.uid,\r\n\t\t\t\t\tcreatedAtDatetime: datetime,\r\n\t\t\t\t\tupdatedByName: `${surname} ${name}`,\r\n\t\t\t\t\tupdatedByUid: user.uid,\r\n\t\t\t\t\tupdatedAtDatetime: datetime,\r\n\t\t\t\t},\r\n\t\t\t});\r\n\r\n\t\t\tsignupDispatch({ type: \"SUCCESS\" });\r\n\t\t} catch (error) {\r\n\t\t\tsignupDispatch({ type: \"ERROR\", payload: error.message });\r\n\t\t\tconsole.log(`signup err`, error.message);\r\n\t\t}\r\n\t};\r\n\r\n\tconst updateUser = async (userCredentials) => {\r\n\t\t// console.log(`userCredentials`, userCredentials);\r\n\t\tconst { surname, name, nickName, companyName, workbase } = userCredentials;\r\n\t\ttry {\r\n\t\t\tsignupDispatch({ type: \"IS_PENDING\" });\r\n\t\t\t// update dispalyName details at firebase auth user. Use first letter of surname and name as dispalyName\r\n\t\t\tawait updateProfile(auth.currentUser, {\r\n\t\t\t\tdisplayName: `${name} ${surname}`,\r\n\t\t\t});\r\n\r\n\t\t\t// TODO:create user profile in firestore using UID as the unique identifier\r\n\t\t\tconst docRef = doc(db, \"users\", user.uid);\r\n\t\t\tconst datetime = Timestamp.now();\r\n\t\t\tawait updateDoc(docRef, {\r\n\t\t\t\t\"metadata.updatedByName\": `${surname} ${name}`,\r\n\t\t\t\t\"metadata.updatedByUid\": user.uid,\r\n\t\t\t\t\"metadata.updatedAtDatetime\": datetime,\r\n\t\t\t\t// nickName,\r\n\t\t\t\tname,\r\n\t\t\t\tsurname,\r\n\t\t\t\t// companyName,\r\n\t\t\t\tworkbase,\r\n\t\t\t});\r\n\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: \"SIGNIN\",\r\n\t\t\t\tpayload: user,\r\n\t\t\t});\r\n\t\t\tsignupDispatch({ type: \"SUCCESS\" });\r\n\t\t} catch (error) {\r\n\t\t\tsignupDispatch({ type: \"ERROR\", payload: error.message });\r\n\t\t\tconsole.log(`updateUser err`, error.message);\r\n\t\t}\r\n\t};\r\n\r\n\tconst updateUserEmail = async (userCredentials) => {\r\n\t\t// console.log(`userCredentials`, userCredentials);\r\n\t\tconst { newEmail, password } = userCredentials;\r\n\t\ttry {\r\n\t\t\tsignupDispatch({ type: \"IS_PENDING\" });\r\n\t\t\tconst credential = EmailAuthProvider.credential(\r\n\t\t\t\tauth.currentUser.email,\r\n\t\t\t\tpassword\r\n\t\t\t);\r\n\t\t\t// console.log(`credential`, credential);\r\n\r\n\t\t\tconst userCredential = await reauthenticateWithCredential(\r\n\t\t\t\tauth.currentUser,\r\n\t\t\t\tcredential\r\n\t\t\t);\r\n\t\t\t// console.log(`userCredential`, userCredential);\r\n\r\n\t\t\tconst idToken = await auth.currentUser.getIdTokenResult(true);\r\n\t\t\t// console.log(`idToken`, idToken);\r\n\r\n\t\t\tconst emailUpdateResult = await updateEmail(auth.currentUser, newEmail);\r\n\t\t\t// console.log(`emailUpdateResult`, emailUpdateResult);\r\n\r\n\t\t\t// // send emil verification\r\n\t\t\tconst sendEmailResult = await sendEmailVerification(auth.currentUser);\r\n\t\t\t// console.log(`sendEmailResult`, sendEmailResult);\r\n\r\n\t\t\tconst docRef = doc(db, \"users\", user.uid);\r\n\t\t\tconst datetime = Timestamp.now();\r\n\t\t\tawait updateDoc(docRef, {\r\n\t\t\t\t\"metadata.updatedByName\": user.displayName,\r\n\t\t\t\t\"metadata.updatedByUid\": user.uid,\r\n\t\t\t\t\"metadata.updatedAtDatetime\": datetime,\r\n\t\t\t\temail: newEmail,\r\n\t\t\t});\r\n\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: \"SIGNIN\",\r\n\t\t\t\tpayload: {\r\n\t\t\t\t\t...user,\r\n\t\t\t\t\tclaims: idToken.claims.roles,\r\n\t\t\t\t},\r\n\t\t\t});\r\n\t\t\tsignupDispatch({ type: \"SUCCESS\" });\r\n\t\t} catch (error) {\r\n\t\t\tsignupDispatch({ type: \"ERROR\", payload: error.message });\r\n\t\t\tconsole.log(`signup err`, error.message);\r\n\t\t}\r\n\t};\r\n\r\n\tconst updateUserWorkbase = async (userCredentials) => {\r\n\t\t// console.log(`userCredentials`, userCredentials);\r\n\t\tconst { newWorkbase: workbase, password } = userCredentials;\r\n\t\ttry {\r\n\t\t\tsignupDispatch({ type: \"IS_PENDING\" });\r\n\t\t\tconst credential = EmailAuthProvider.credential(\r\n\t\t\t\tauth.currentUser.email,\r\n\t\t\t\tpassword\r\n\t\t\t);\r\n\t\t\t// console.log(`credential`, credential);\r\n\r\n\t\t\tconst userCredential = await reauthenticateWithCredential(\r\n\t\t\t\tauth.currentUser,\r\n\t\t\t\tcredential\r\n\t\t\t);\r\n\t\t\t// console.log(`userCredential`, userCredential);\r\n\r\n\t\t\tconst idToken = await auth.currentUser.getIdTokenResult(true);\r\n\t\t\t// console.log(`idToken`, idToken);\r\n\r\n\t\t\t// update claims with workbase using onCall cloud function\r\n\t\t\t// console.log(`workbase`, workbase)\r\n\t\t\tconst updateUserWorkbase = httpsCallable(functions, \"updateUserWorkbase\");\r\n\t\t\tconst wbResult = await updateUserWorkbase({\r\n\t\t\t\troles: {\r\n\t\t\t\t\tworkbase,\r\n\t\t\t\t},\r\n\t\t\t});\r\n\t\t\t// console.log(`wbResult`, wbResult);\r\n\r\n\t\t\tconst docRef = doc(db, \"users\", user.uid);\r\n\t\t\tconst datetime = Timestamp.now();\r\n\t\t\tawait updateDoc(docRef, {\r\n\t\t\t\t\"metadata.updatedByName\": user.displayName,\r\n\t\t\t\t\"metadata.updatedByUid\": user.uid,\r\n\t\t\t\t\"metadata.updatedAtDatetime\": datetime,\r\n\t\t\t\tworkbase: workbase,\r\n\t\t\t});\r\n\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: \"SIGNIN\",\r\n\t\t\t\tpayload: {\r\n\t\t\t\t\t...user,\r\n\t\t\t\t\tclaims: idToken.claims.roles,\r\n\t\t\t\t},\r\n\t\t\t});\r\n\t\t\tsignupDispatch({ type: \"SUCCESS\" });\r\n\t\t} catch (error) {\r\n\t\t\tsignupDispatch({ type: \"ERROR\", payload: error.message });\r\n\t\t\tconsole.log(`signup err`, error.message);\r\n\t\t}\r\n\t};\r\n\r\n\tconst updateUserObject = async (userData, uid) => {\r\n\t\t// console.log(`userData`, userData);\r\n\t\t// console.log(`uid`, uid);\r\n\r\n\t\t// const { workbases } = userCredentials;\r\n\r\n\t\ttry {\r\n\t\t\tsignupDispatch({ type: \"IS_PENDING\" });\r\n\t\t\t// update dispalyName details at firebase auth user. Use first letter of surname and name as dispalyName\r\n\t\t\t// await updateProfile(auth.currentUser, {\r\n\t\t\t// \tdisplayName: `${name} ${surname}`,\r\n\t\t\t// });\r\n\r\n\t\t\t// TODO:create user profile in firestore using UID as the unique identifier\r\n\t\t\tconst docRef = doc(db, \"users\", uid);\r\n\t\t\tconst datetime = Timestamp.now();\r\n\t\t\tawait updateDoc(docRef, {\r\n\t\t\t\t\"metadata.updatedByName\": `${user.displayName}`,\r\n\t\t\t\t\"metadata.updatedByUid\": user.uid,\r\n\t\t\t\t\"metadata.updatedAtDatetime\": datetime,\r\n\t\t\t\tworkbases: userData.workbases,\r\n\t\t\t});\r\n\r\n\t\t\tsignupDispatch({ type: \"SUCCESS\" });\r\n\t\t} catch (error) {\r\n\t\t\tsignupDispatch({ type: \"ERROR\", payload: error.message });\r\n\t\t\tconsole.log(`updateUser err`, error.message);\r\n\t\t}\r\n\t};\r\n\r\n\treturn {\r\n\t\tsignup,\r\n\t\tupdateUser,\r\n\t\tupdateUserEmail,\r\n\t\tupdateUserWorkbase,\r\n\t\tsignupState,\r\n\t\tupdateUserObject,\r\n\t};\r\n};\r\n\r\n// const signupWithPhoneNumber = async userCredentials => {\r\n// \tconsole.log(`userCredentials`, userCredentials);\r\n// \tconst { phoneNumber } = userCredentials;\r\n\r\n// \ttry {\r\n// \t\tlet recaptcha = null;\r\n\r\n// \t\trecaptcha = new RecaptchaVerifier(auth, \"recaptcha-container\", {\r\n// \t\t\tsize: \"invisible\",\r\n// \t\t\tcallback: response => {\r\n// \t\t\t\tconsole.log(`reCAPTCHA solved - response`, response);\r\n// \t\t\t},\r\n// \t\t});\r\n// \t\tconsole.log(`recaptcha`, recaptcha);\r\n// \t\tsignupDispatch({ type: \"SAVE_USER\", payload: auth.currentUser });\r\n// \t\tconst confirmationResult = await signInWithPhoneNumber(\r\n// \t\t\tauth,\r\n// \t\t\tphoneNumber,\r\n// \t\t\trecaptcha\r\n// \t\t);\r\n// \t\tconsole.log(`confirmationResult`, confirmationResult);\r\n// \t\tsignupDispatch({ type: \"OTP_SENT\", payload: confirmationResult });\r\n// \t} catch (error) {\r\n// \t\tsignupDispatch({ type: \"ERROR\", payload: error.message });\r\n// \t\tconsole.log(`Error in signupWithPhoneNumber :`, error.message);\r\n// \t}\r\n// };\r\n\r\n// const signupWithPhoneOtp = async otp => {\r\n// \tconsole.log(`otp`, otp);\r\n// \tconsole.log(`signupState`, signupState);\r\n// \tconsole.log(`auth`, auth);\r\n\r\n// \tconst credentialPassword = EmailAuthProvider.credential(\r\n// \t\t\"siya@gmail.com\",\r\n// \t\t\"fkpass123\"\r\n// \t);\r\n// \tconsole.log(`credentialPassword`, credentialPassword);\r\n\r\n// \tconst result = await signupState.otpSentConformation.confirm(otp.otp);\r\n// \tconsole.log(`User signed in successfully. - result: `, result);\r\n\r\n// \tconst { verificationId } = signupState.otpSentConformation;\r\n\r\n// \tconst credentialPhone = PhoneAuthProvider.credential(verificationId, otp);\r\n// \tconsole.log(`credentialPhone`, credentialPhone);\r\n// \tconsole.log(`auth.currentUser`, auth.currentUser);\r\n// \tconsole.log(`password.user`, signupState.user);\r\n\r\n// \t// delete phone auth\r\n// \tconst res = await auth.currentUser.delete();\r\n// \tconsole.log(`res`, res);\r\n\r\n// \t// link the accounts\r\n// \tconsole.log(`signupState`, signupState);\r\n// \tconst linkResult = await linkWithCredential(\r\n// \t\tsignupState.user,\r\n// \t\tcredentialPhone\r\n// \t);\r\n// \tconsole.log(`linkResult`, linkResult);\r\n\r\n// signin with password credential\r\n// const signinRes = await auth.signInWithCredential(credentialPassword);\r\n// console.log(`signinRes`, signinRes);\r\n\r\n// const result_ = await signInWithEmailAndPassword(\r\n// \tauth,\r\n// \t\"zuko@gmail.com\",\r\n// \t\"fkpass123\"\r\n// );\r\n// const { user } = result_;\r\n// console.log(`user`, user);\r\n\r\n// const idToken = await auth.currentUser.getIdTokenResult(true);\r\n// console.log(`idToken`, idToken);\r\n\r\n// dispatch({\r\n// \ttype: \"SIGNIN\",\r\n// \tpayload: {\r\n// \t\t...user,\r\n// \t\tclaims: idToken.claims.roles,\r\n// \t},\r\n// });\r\n\r\n// linkWithCredential(auth.currentUser, credential)\r\n// \t.then(async usercred => {\r\n// \t\tconst user_ = usercred.user;\r\n// \t\tconsole.log(\"Account linking success\", user_);\r\n// \t})\r\n// \t.catch(error => {\r\n// \t\tconsole.log(\"Account linking error\", error);\r\n// \t});\r\n\r\n// const idToken = await auth.currentUser.getIdTokenResult(true);\r\n// console.log(`idToken`, idToken);\r\n// dispatch({\r\n// \ttype: \"SIGNIN\",\r\n// \tpayload: {\r\n// \t\t...user,\r\n// \t\tclaims: idToken.claims.roles,\r\n// \t},\r\n// });\r\n// TODO:update user profile in firestore using UID as the unique identifier\r\n// const docRef = doc(db, \"users\", user.uid);\r\n// const datetime = Timestamp.now();\r\n// await setDoc(docRef, {\r\n// \tmetadata: {\r\n// \t\tupdateByByName: `${user?.surname} ${user?.name}`,\r\n// \t\tupdateByByUid: user.uid,\r\n// \t\tupdateByAtDatetime: datetime,\r\n// \t},\r\n// \tphoneNumber: user.phoneNumber,\r\n// \t// });\r\n// \tsignupDispatch({ type: \"SUCCESS\" });\r\n// })\r\n// .catch(error => {\r\n// \tsignupDispatch({ type: \"ERROR\", payload: error.message });\r\n// \tconsole.log(\r\n// \t\t`Error with OTP. User couldn't sign in (bad verification code?) : `,\r\n// \t\terror.message\r\n// \t);\r\n// });\r\n// };\r\n"],"names":["initSignup","signupReducer","state","action","useSignup","signupState","signupDispatch","useReducer","user","dispatch","useAuthContext","userCredentials","surname","name","password","email","phoneNumber","workbase","result","createUserWithEmailAndPassword","auth","idToken","sendEmailVerification","updateProfile","wbResult","httpsCallable","functions","docRef","doc","db","datetime","Timestamp","setDoc","error","nickName","companyName","updateDoc","newEmail","credential","EmailAuthProvider","userCredential","reauthenticateWithCredential","emailUpdateResult","updateEmail","sendEmailResult","userData","uid"],"mappings":"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"}