import{r as h,u as D,bi as P,a4 as d,bj as R,bk as E,a8 as b,bl as k,aa as y,d as U,k as w,bm as B,az as N,bn as I,bo as f,bp as W}from"./index-CyIbrq5N.js";const $={error:null,isPending:null,success:null,otpSent:!1,otpSentConformation:null,user:null},A=(c,e)=>{switch(e.type){case"IS_PENDING":return{...c,error:"",isPending:!0,success:!1};case"OTP_SENT":return{...c,otpSent:!0,otpSentConformation:e.payload};case"SUCCESS":return{...c,error:"",isPending:!1,success:!0};case"ERROR":return{...c,error:e.payload,isPending:!1,success:!1};case"SAVE_USER":return{...c,user:e.payload};default:return c}},z=()=>{const[c,e]=h.useReducer(A,$),{user:r,dispatch:S}=D();return{signup:async o=>{const{surname:t,name:a,password:s,email:l,phoneNumber:p,workbase:n}=o;try{e({type:"IS_PENDING"});const u=await P(d,l,s);if(!u)throw new Error("User signup failed");const{user:i}=u,m=await d.currentUser.getIdTokenResult(!0);await R(i),await E(d.currentUser,{displayName:`${a} ${t}`});const V=await(await b(k,"updateUserWorkbase"))({roles:{workbase:n}});S({type:"SIGNIN",payload:{...i,claims:m.claims.roles}});const C=y(U,"users",i.uid),g=w.now();await B(C,{surname:t,name:a,email:l,phoneNumber:p,workbase:n,metadata:{createdByName:`${t} ${a}`,createdByUid:i.uid,createdAtDatetime:g,updatedByName:`${t} ${a}`,updatedByUid:i.uid,updatedAtDatetime:g}}),e({type:"SUCCESS"})}catch(u){e({type:"ERROR",payload:u.message}),console.log("signup err",u.message)}},updateUser:async o=>{const{surname:t,name:a,nickName:s,companyName:l,workbase:p}=o;try{e({type:"IS_PENDING"}),await E(d.currentUser,{displayName:`${a} ${t}`});const n=y(U,"users",r.uid),u=w.now();await N(n,{"metadata.updatedByName":`${t} ${a}`,"metadata.updatedByUid":r.uid,"metadata.updatedAtDatetime":u,name:a,surname:t,workbase:p}),S({type:"SIGNIN",payload:r}),e({type:"SUCCESS"})}catch(n){e({type:"ERROR",payload:n.message}),console.log("updateUser err",n.message)}},updateUserEmail:async o=>{const{newEmail:t,password:a}=o;try{e({type:"IS_PENDING"});const s=I.credential(d.currentUser.email,a),l=await f(d.currentUser,s),p=await d.currentUser.getIdTokenResult(!0),n=await W(d.currentUser,t),u=await R(d.currentUser),i=y(U,"users",r.uid),m=w.now();await N(i,{"metadata.updatedByName":r.displayName,"metadata.updatedByUid":r.uid,"metadata.updatedAtDatetime":m,email:t}),S({type:"SIGNIN",payload:{...r,claims:p.claims.roles}}),e({type:"SUCCESS"})}catch(s){e({type:"ERROR",payload:s.message}),console.log("signup err",s.message)}},updateUserWorkbase:async o=>{const{newWorkbase:t,password:a}=o;try{e({type:"IS_PENDING"});const s=I.credential(d.currentUser.email,a),l=await f(d.currentUser,s),p=await d.currentUser.getIdTokenResult(!0),u=await b(k,"updateUserWorkbase")({roles:{workbase:t}}),i=y(U,"users",r.uid),m=w.now();await N(i,{"metadata.updatedByName":r.displayName,"metadata.updatedByUid":r.uid,"metadata.updatedAtDatetime":m,workbase:t}),S({type:"SIGNIN",payload:{...r,claims:p.claims.roles}}),e({type:"SUCCESS"})}catch(s){e({type:"ERROR",payload:s.message}),console.log("signup err",s.message)}},signupState:c,updateUserObject:async(o,t)=>{try{e({type:"IS_PENDING"});const a=y(U,"users",t),s=w.now();await N(a,{"metadata.updatedByName":`${r.displayName}`,"metadata.updatedByUid":r.uid,"metadata.updatedAtDatetime":s,workbases:o.workbases}),e({type:"SUCCESS"})}catch(a){e({type:"ERROR",payload:a.message}),console.log("updateUser err",a.message)}}}};export{z as u};
