{"version":3,"file":"AstsMain-DVfqy-sN.js","sources":["../../src/components/tables/TableAsts.jsx","../../src/components/asts/AstsTable.jsx","../../src/components/reports/ReportHeading.jsx","../../src/components/tables/TableAstsUsers.jsx","../../src/components/reports/ReportAstsUsersTable.jsx","../../src/components/reports/ReportAstsUsersBarChart.jsx","../../src/components/reports/ReportAstsUsers.jsx","../../src/components/stats/StatsComboTableAnomalies.jsx","../../src/components/reports/ReportAstsAnomalies.jsx","../../src/components/stats/StatsComboTableMeterTypes.jsx","../../src/components/stats/StatsComboBarChartMeterType.jsx","../../src/components/reports/ReportAstsMeterType.jsx","../../src/components/asts/AstsMain.jsx"],"sourcesContent":["import { useMemo, useRef } from \"react\";\r\nimport useAuthContext from \"@/hooks/useAuthContext\";\r\n\r\nimport \"@/components/tables/Table.css\";\r\nimport \"@/components/tables/TableAsts.css\";\r\nimport { TableCustomNoRowsOverlay } from \"@/components/tables/TableCustomNoRowsOverlay\";\r\n\r\n// ag grid\r\nimport { ModuleRegistry } from \"@ag-grid-community/core\";\r\nimport { ClientSideRowModelModule } from \"@ag-grid-community/client-side-row-model\";\r\nimport { AgGridReact } from \"@ag-grid-community/react\";\r\nimport \"@ag-grid-community/styles/ag-grid.css\";\r\nimport \"@ag-grid-community/styles/ag-theme-quartz.css\";\r\nModuleRegistry.registerModules([ClientSideRowModelModule]);\r\n\r\nconst TableAsts = (props) => {\r\n\t// console.log(`props`, props);\r\n\tconst { rowData, colDefs, tableRef } = props;\r\n\t// console.log(`rowData`, rowData);\r\n\r\n\tconst gridApiRef = useRef();\r\n\r\n\tconst { user } = useAuthContext();\r\n\t// console.log(`user`, user);\r\n\r\n\t// const { fieldworker, guest } = user?.claims;\r\n\r\n\tconst email = user?.email;\r\n\t// console.log(`email`, email);\r\n\r\n\tconst displayName = user?.displayName;\r\n\t// console.log(`displayName`, displayName);\r\n\r\n\t// const sliced = rowData.slice(0, 15);\r\n\t// console.log(`sliced`, sliced);\r\n\r\n\tconst defaultColDef = useMemo(\r\n\t\t() => ({\r\n\t\t\tsortable: true,\r\n\t\t\tfilter: true,\r\n\t\t\tresizable: true,\r\n\t\t\tfloatingFilter: true,\r\n\t\t\tsuppressMovable: true,\r\n\t\t}),\r\n\t\t[]\r\n\t);\r\n\r\n\tconst getRowId = (params) => {\r\n\t\t// console.log(`params`, params);\r\n\t\treturn params.data.id;\r\n\t};\r\n\r\n\tconst onGridReady = async (params) => {\r\n\t\t// console.log(`params`, params);\r\n\t\tgridApiRef.current = params.api; // <= assigned gridApi value on Grid ready\r\n\t\t// console.log(`gridApiRef.current`, gridApiRef.current);\r\n\t};\r\n\r\n\tconst onFirstDataRendered = () => {\r\n\t\t// const filterModel = gridApiRef.current.getFilterModel(\"metadata.updatedByUser\");\r\n\t\t// console.log(`filterModel`, filterModel);\r\n\r\n\t\tif (\r\n\t\t\t!(\r\n\t\t\t\temail === \"fikilekentane@gmail.com\" ||\r\n\t\t\t\temail === \"zamo@rsteutilities.com\" ||\r\n\t\t\t\temail === \"sbu@isandisoipe.co.za\"\r\n\t\t\t)\r\n\t\t) {\r\n\t\t\tgridApiRef.current.setColumnFilterModel(\"metadata.createdByUser\", {\r\n\t\t\t\tfilterType: \"text\",\r\n\t\t\t\ttype: \"contains\",\r\n\t\t\t\tfilter: displayName,\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// const Model = gridApiRef.current.getFilterModel(\"metadata.updatedByUser\");\r\n\t\t// console.log(`Model before`, Model);\r\n\r\n\t\tgridApiRef.current.onFilterChanged();\r\n\t\t// console.log(`Model after`, Model);\r\n\t};\r\n\r\n\tconst rowClassRules = {\r\n\t\t\"delete-pending\": (params) => {\r\n\t\t\t// console.log(`params?.data?.disabled`, params?.data?.disabled);\r\n\t\t\treturn params?.data?.deleteAst === \"deletePending\" ? true : false;\r\n\t\t},\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"ag-theme-quartz table table-asts\">\r\n\t\t\t<AgGridReact\r\n\t\t\t\trowData={rowData}\r\n\t\t\t\tcolumnDefs={colDefs}\r\n\t\t\t\tdefaultColDef={defaultColDef}\r\n\t\t\t\tpagination={true}\r\n\t\t\t\tnoRowsOverlayComponent={TableCustomNoRowsOverlay}\r\n\t\t\t\tgetRowId={getRowId}\r\n\t\t\t\treactiveCustomComponents\r\n\t\t\t\tonGridReady={onGridReady}\r\n\t\t\t\tonFirstDataRendered={onFirstDataRendered}\r\n\t\t\t\tref={tableRef}\r\n\t\t\t\trowClassRules={rowClassRules}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default TableAsts;\r\n","// css\r\nimport \"@/components/asts/AstsTable.css\";\r\n\r\n// components\r\nimport TableAsts from \"@/components/tables/TableAsts\";\r\n\r\nconst AstsTable = ({ asts, astsTableFields, tableRef }) => {\r\n\t// console.log(`asts`, asts);\r\n\t// console.log(`astsTableFields`, astsTableFields);\r\n\r\n\treturn (\r\n\t\t<div className=\"asts-table table\">\r\n\t\t\t<TableAsts rowData={asts} colDefs={astsTableFields} tableRef={tableRef} />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default AstsTable;\r\n","// npm\nimport { useContext } from \"react\";\nimport { format } from \"date-fns\";\nimport { cloneDeep } from \"lodash\";\n\n// css\nimport \"@/components/reports/ReportHeading.css\";\n\n// contexts\nimport { FiltersContext } from \"@/contexts/FiltersContext\";\nimport { AstsContext } from \"@/contexts/AstsContext\";\n\nimport { constants } from \"@/utils/utils\";\n\nconst ReportHeading = (props) => {\n\t// console.log(`props`, props);\n\n\tconst stats = props?.stats;\n\t// console.log(`stats`, stats);\n\n\tconst total = stats?.total;\n\t// console.log(`total`, total);\n\n\tconst { filtersContext } = useContext(FiltersContext);\n\t// console.log(`filtersContext`, filtersContext);\n\n\tconst { createdAtDatetimeRange, updatedAtDatetimeRange, filterCondition } =\n\t\tfiltersContext;\n\n\tconst { astsContext } = useContext(AstsContext);\n\t// console.log(`astsContext`, astsContext);\n\n\tconst createdAt =\n\t\tcreatedAtDatetimeRange[0] == null ||\n\t\tcreatedAtDatetimeRange[0] == undefined ||\n\t\tcreatedAtDatetimeRange[1] == null ||\n\t\tcreatedAtDatetimeRange[1] == undefined\n\t\t\t? false\n\t\t\t: true;\n\n\t// console.log(`createdAt`, createdAt);\n\n\tconst updatedAt =\n\t\tupdatedAtDatetimeRange[0] == null ||\n\t\tupdatedAtDatetimeRange[0] == undefined ||\n\t\tupdatedAtDatetimeRange[1] == null ||\n\t\tupdatedAtDatetimeRange[1] == undefined\n\t\t\t? false\n\t\t\t: true;\n\t// console.log(`updatedAt`, updatedAt);\n\n\tlet range = [];\n\tlet rangeLabel = \"\";\n\tif (createdAt || updatedAt) {\n\t\t// There is filtering. Use date range from filters\n\t\tif (createdAt) {\n\t\t\trange = createdAtDatetimeRange;\n\t\t\trangeLabel = \"Created At Datetime\";\n\t\t}\n\t\tif (updatedAt) {\n\t\t\trange = updatedAtDatetimeRange;\n\t\t\trangeLabel = \"Updated At Datetime\";\n\t\t}\n\t} else {\n\t\t// There is no filtering. Get date range from astsContext.asts\n\n\t\t// console.log(`range`, range);\n\t\trangeLabel = \"Entire Range (CreatedAtDatetime)\";\n\t\t// Get asts array from astsContext\n\t\tconst asts = astsContext?.asts;\n\t\t// console.log(`asts`, asts);\n\n\t\tif (!asts) return;\n\n\t\t// asts?.map((ast) => {\n\t\t// \tconst dt = ast?.metadata?.createdAtDatetime;\n\t\t// \tconsole.log(`dt`, dt);\n\t\t// \tconsole.log(`dt`, format(dt?.toDate(), constants?.dateFormat0));\n\t\t// });\n\n\t\tconst dA = asts?.[0]?.metadata?.createdAtDatetime;\n\t\t// console.log(`dA`, dA);\n\t\t// const testDateA = format(dA?.toDate(), constants?.dateFormat0);\n\t\t// console.log(`testDateA`, testDateA);\n\n\t\t// const dB = asts?.[asts.length - 1]?.metadata?.createdAtDatetime;\n\t\t// const testDateB = format(dB?.toDate(), constants?.dateFormat0);\n\t\t// console.log(`testDateA`, testDateB);\n\n\t\t// if (!asts) return;\n\n\t\t// clone asts first\n\t\tconst astsClone = cloneDeep(asts);\n\t\t// console.log(`astsClone`, astsClone);\n\n\t\t// Sort by createdAtDatetime\n\t\tastsClone?.sort((a, b) => {\n\t\t\t// console.log(`a.metadata.createdAtDatetime`, a.metadata.createdAtDatetime);\n\t\t\t// console.log(`b.metadata.createdAtDatetime`, b.metadata.createdAtDatetime);\n\t\t\t// Turn your strings into dates, and then subtract them\n\t\t\t// to get a value that is either negative, positive, or zero.\n\t\t\tconst dateA = a.metadata?.createdAtDatetime?.toMillis();\n\t\t\tconst dateB = b.metadata?.createdAtDatetime?.toMillis();\n\t\t\treturn dateA - dateB;\n\t\t});\n\t\t// console.log(`astsClone`, asts);\n\n\t\t// astsClone?.sort((a, b) => {\n\t\t// \t// console.log(`a.metadata.createdAtDatetime`, a.metadata.createdAtDatetime);\n\t\t// \t// console.log(`b.metadata.createdAtDatetime`, b.metadata.createdAtDatetime);\n\t\t// \t// Turn your strings into dates, and then subtract them\n\t\t// \t// to get a value that is either negative, positive, or zero.\n\t\t// \tconst dateA = a.metadata?.updatedAtDatetime?.toDate();\n\t\t// \tconst dateB = b.metadata?.updatedAtDatetime?.toDate();\n\t\t// \treturn dateA - dateB;\n\t\t// });\n\n\t\t// Get first element in the asts array and extract createdAtDatetime and assign to date1\n\t\tconst dateA = astsClone?.[0]?.metadata?.createdAtDatetime;\n\t\t// const testDateA = format(dateA.toDate(), constants.dateFormat0);\n\t\t// console.log(`testDateA`, testDateA);\n\t\t// console.log(`dateA`, dateA);\n\n\t\t// Get last element in the asts array and extract createdAtDatetime and assign to date2\n\t\tconst dateB =\n\t\t\tastsClone?.[astsClone?.length - 1]?.metadata?.createdAtDatetime;\n\t\t// console.log(`dateB`, dateB);\n\n\t\t// const testDateB = format(dateB.toDate(), constants.dateFormat0);\n\t\t// console.log(`testDateB`, testDateB);\n\n\t\t// Assign date1 and date2 to the range\n\t\trange = [dateA?.toDate(), dateB?.toDate()];\n\t\t// console.log(`range`, range);\n\t}\n\n\tconst date1 = range?.[0];\n\t// console.log(`date1`, date1);\n\tconst date2 = range?.[1];\n\t// console.log(`date2`, date2);\n\n\tconst d1 = format(new Date(date1 || 0), constants.dateFormat3);\n\t// console.log(`d1`, d1);\n\n\tconst d2 = format(new Date(date2 || 0), constants.dateFormat3);\n\t// console.log(`d2`, d2);\n\n\tconst { astCreation } = filterCondition;\n\n\tlet astCreator = \"Audits&Installations\";\n\tif (astCreation === \"audit\") {\n\t\tastCreator = \"Only Audits\";\n\t}\n\tif (astCreation === \"installation\") {\n\t\tastCreator = \"Only Installations\";\n\t}\n\n\tconst { title } = props;\n\treturn (\n\t\t<div className=\"report-heading\">\n\t\t\t<div className=\"rh rh-left\">\n\t\t\t\t<p className=\"rhl rh-element rhll\">{title}</p>\n\t\t\t\t<p className=\"rhr rh-element rhlr\"></p>\n\t\t\t</div>\n\t\t\t<div className=\"rh rh-right\">\n\t\t\t\t<p className=\"rhr rh-element rhrl\"></p>\n\t\t\t\t<p className=\"rhr rh-element rhrr\">Total: {total}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default ReportHeading;\n","import \"@/components/tables/Table.css\";\nimport \"@/components/tables/TableAstsUsers.css\";\n\n// ag grid\nimport { ModuleRegistry } from \"@ag-grid-community/core\";\nimport { ClientSideRowModelModule } from \"@ag-grid-community/client-side-row-model\";\nimport { AgGridReact } from \"@ag-grid-community/react\";\nimport \"@ag-grid-community/styles/ag-grid.css\";\nimport \"@ag-grid-community/styles/ag-theme-quartz.css\";\n\nModuleRegistry.registerModules([ClientSideRowModelModule]);\n\nconst TableAstsUsers = (props) => {\n\t// console.log(`props`, props)\n\tconst { rowData, colDefs } = props;\n\n\treturn (\n\t\t<div className=\"ag-theme-quartz table table-trns\">\n\t\t\t<AgGridReact rowData={rowData} columnDefs={colDefs} />\n\t\t</div>\n\t);\n};\n\nexport default TableAstsUsers;\n","import \"@/components/reports/ReportAstsUsersTable.css\";\r\n\r\nimport TableAstsUsers from \"@/components/tables/TableAstsUsers\";\r\n\r\nconst ReportAstsUsersTable = (props) => {\r\n\t// console.log(`props`, props);\r\n\r\n\tconst { data } = props;\r\n\r\n\tconst tableFields = [\r\n\t\t{\r\n\t\t\tfield: \"uid\",\r\n\t\t\theaderName: \"System Id\",\r\n\t\t\thide: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tfield: \"displayName\",\r\n\t\t\theaderName: \"User Name\",\r\n\t\t\tflex: 0.5,\r\n\t\t},\r\n\t\t{\r\n\t\t\tfield: \"quantity\",\r\n\t\t\theaderName: \"Quantities\",\r\n\t\t\tflex: 0.3,\r\n\t\t},\r\n\t\t{\r\n\t\t\tfield: \"percentage\",\r\n\t\t\theaderName: \"%\",\r\n\t\t\tflex: 0.2,\r\n\t\t},\r\n\t];\r\n\treturn (\r\n\t\t<div className=\"report-asts-users-table\">\r\n\t\t\t<TableAstsUsers rowData={data} colDefs={tableFields} />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default ReportAstsUsersTable;\r\n","import { useState, useEffect } from \"react\";\nimport { AgCharts } from \"ag-charts-react\";\n\nimport \"@/components/reports/ReportAstsUsersBarChart.css\";\n\nconst ReportAstsUsersBarChart = (props) => {\n\tconst { data } = props;\n\t// console.log(`data`, data);\n\n\tconst [chartOptions, setChartOptions] = useState({\n\t\t// Data: Data to be displayed in the chart\n\t\tdata: data,\n\t\t// Series: Defines which chart type and data to use\n\t\tseries: [\n\t\t\t{\n\t\t\t\ttype: \"bar\",\n\t\t\t\txKey: \"displayName\",\n\t\t\t\tyKey: \"quantity\",\n\t\t\t\titemStyler: (params) => {\n\t\t\t\t\t// console.log(`params`, params);\n\t\t\t\t\treturn { fill: params.datum.fillColor };\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t\ttitle: {\n\t\t\ttext: \"Meters Created Per Fieldworker\",\n\t\t},\n\t});\n\n\tuseEffect(() => {\n\t\tsetChartOptions({\n\t\t\t...chartOptions,\n\t\t\tdata,\n\t\t});\n\t}, [data]);\n\n\treturn (\n\t\t<div className=\"report-asts-users-barchart\">\n\t\t\t<AgCharts options={chartOptions} />\n\t\t</div>\n\t);\n};\n\nexport default ReportAstsUsersBarChart;\n","// npm libraries\nimport { useContext } from \"react\";\n\nimport \"@/components/reports/ReportAstsUsers.css\";\n\n// contexts\nimport { AstsStatsContext } from \"@/contexts/AstsStatsContext\";\n\nimport ReportHeading from \"@/components/reports/ReportHeading\";\nimport ReportAstsUsersTable from \"@/components/reports/ReportAstsUsersTable\";\n// import ReportAstsUsersPieChart from \"@/components/reports/ReportAstsUsersPieChart\";\nimport ReportAstsUsersBarChart from \"@/components/reports/ReportAstsUsersBarChart\";\n\nconst ReportAstsUsers = () => {\n\tconst { astsStatsContext } = useContext(AstsStatsContext);\n\t// console.log(`astsStatsContext`, astsStatsContext);\n\n\tconst users = astsStatsContext?.statsAstsUsers;\n\t// console.log(`users`, users);\n\n\treturn (\n\t\t<div className={`report-asts-users`}>\n\t\t\t<ReportHeading title=\"Users Stats\" stats={users} />\n\t\t\t<div className=\"rau-body\">\n\t\t\t\t<ReportAstsUsersTable data={users?.stats} />\n\t\t\t\t<ReportAstsUsersBarChart data={users?.stats} />\n\t\t\t\t{/* <ReportAstsUsersPieChart data={users} /> */}\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default ReportAstsUsers;\n","// npm libraries\n// import { useContext } from \"react\";\n\nimport \"@/components/stats/StatsComboTableAnomalies.css\";\n\n// contexts\n// import { FiltersContext } from \"@/contexts/FiltersContext\";\n// import { AstsStatsContext } from \"@/contexts/AstsStatsContext\";\nimport { capitalizeInitialsString } from \"@/utils/utils\";\n\n// components\nimport TableComboData from \"@/components/tables/TableComboData\";\n\nconst StatsComboTableAnomalies = (props) => {\n\t// Get asts anomalies from the astsStatsContext\n\tconst { stats, tableRef } = props;\n\t// console.log(`stats`, stats);\n\n\tlet columnDefinitions = [\n\t\t{\n\t\t\tfield: \"anomalyName\",\n\t\t\theaderName: \"Anomaly - Anomaly Detail\",\n\t\t\twidth: \"220\",\n\t\t\t// flex: 0.3,\n\t\t},\n\t];\n\tlet anomalyData = [];\n\tstats?.forEach((anomaly) => {\n\t\t// console.log(`anomaly`, anomaly);\n\n\t\tconst adsa = anomaly.anomalyDetailStatsArray;\n\t\t// console.log(`adsa`, adsa);\n\n\t\tadsa?.forEach((item) => {\n\t\t\t// console.log(`users`, users);\n\t\t\tconst users = item.updatedUserStats;\n\t\t\t// console.log(`item`, item);\n\n\t\t\tconst anomalyFieldName = `${anomaly.anomalyName}-${item.anomalyDetailName}`;\n\t\t\t// console.log(`anomalyFieldName`, anomalyFieldName);\n\n\t\t\tlet userObj = {};\n\t\t\tusers?.forEach((user) => {\n\t\t\t\t// console.log(`user`, user);\n\t\t\t\tuserObj[user.uid] = {\n\t\t\t\t\tuser: user,\n\t\t\t\t};\n\n\t\t\t\tconst result = columnDefinitions.some(\n\t\t\t\t\t(fw) => fw?.valueGetterParam?.uid === user.uid\n\t\t\t\t);\n\t\t\t\tif (!result) {\n\t\t\t\t\tcolumnDefinitions.push({\n\t\t\t\t\t\tfield: `userObj.${user.uid}.user.quantity`,\n\t\t\t\t\t\theaderName: capitalizeInitialsString(user.displayName),\n\t\t\t\t\t\twidth: \"58\",\n\t\t\t\t\t\theaderTooltip: user.displayName,\n\t\t\t\t\t\t// flex: 0.1,\n\t\t\t\t\t\tvalueGetter: (params) => {\n\t\t\t\t\t\t\tconst value = params.data?.userObj[user?.uid]?.user?.quantity;\n\t\t\t\t\t\t\treturn value ? value : 0;\n\t\t\t\t\t\t},\n\t\t\t\t\t\tvalueGetterParams: {\n\t\t\t\t\t\t\tuid: user.uid,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t\t// console.log(`userObj`, userObj);\n\n\t\t\tanomalyData.push({\n\t\t\t\tanomalyName: anomalyFieldName,\n\t\t\t\tanomalyDetailStats: item.anomalyDetailStats,\n\t\t\t\tuserObj,\n\t\t\t});\n\n\t\t\t// console.log(`userData`, userData);\n\t\t});\n\t});\n\t// console.log(`anomalyData`, anomalyData);\n\t// console.log(`columnDefinitions`, columnDefinitions);\n\n\tcolumnDefinitions.push({\n\t\tfield: \"anomalyDetailStats\",\n\t\theaderName: \"Total\",\n\t\twidth: \"100\",\n\t\t// flex: 0.1,\n\t\tcellRenderer: (params) => {\n\t\t\t// console.log(`params.value`, params.value);\n\t\t\treturn params.value ? params.value : 0;\n\t\t},\n\t});\n\n\treturn (\n\t\t<div className=\"stats-combo-table-anomalies\">\n\t\t\t<TableComboData\n\t\t\t\trowData={anomalyData}\n\t\t\t\tcolDefs={columnDefinitions}\n\t\t\t\ttableRef={tableRef}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nexport default StatsComboTableAnomalies;\n","// npm libraries\nimport { useContext, useRef } from \"react\";\n\nimport \"@/components/reports/ReportAstsAnomalies.css\";\n\n// contexts\nimport { AstsStatsContext } from \"@/contexts/AstsStatsContext\";\n\nimport ReportHeading from \"@/components/reports/ReportHeading\";\nimport StatsCombo from \"@/components/stats/StatsCombo\";\nimport StatsComboTableAnomalies from \"@/components/stats/StatsComboTableAnomalies\";\nimport StatsComboBarChartAnomalies from \"@/components/stats/StatsComboBarChartAnomalies\";\nimport StatsComboPieChart from \"@/components/stats/StatsComboPieChart\";\nimport StatsCard from \"@/components/stats/StatsCard\";\n\nimport { ModuleRegistry } from \"@ag-grid-community/core\";\nimport { ClientSideRowModelModule } from \"@ag-grid-community/client-side-row-model\";\nimport \"@ag-grid-community/styles/ag-grid.css\";\nimport \"@ag-grid-community/styles/ag-theme-quartz.css\";\nimport { CsvExportModule } from \"@ag-grid-community/csv-export\";\n\nModuleRegistry.registerModules([ClientSideRowModelModule]);\nModuleRegistry.registerModules([CsvExportModule]);\n\nconst ReportAnomalies = () => {\n\tconst { astsStatsContext } = useContext(AstsStatsContext);\n\t// console.log(`astsStatsContext`, astsStatsContext);\n\n\tconst tableRef = useRef();\n\n\tconst { anomalyPerUserStats } = astsStatsContext;\n\t// console.log(`anomalyPerUserStats`, anomalyPerUserStats);\n\n\tconst handleClick = (e) => {\n\t\t// console.log(`export btn clicked`, e.target.value);\n\t\t// console.log(`tableRef`, tableRef);\n\t\ttableRef.current.api.exportDataAsCsv();\n\t};\n\n\tconst statsName = \"Anomaly Summary\";\n\tconst headerDataGeneric = {\n\t\thl1: \"hl1\",\n\t\thl2: \"\",\n\t\thr1: \" \",\n\t\thr2: (\n\t\t\t<>\n\t\t\t\t<button onClick={handleClick} className=\"stats-btn stats-btn-export\">\n\t\t\t\t\tExport\n\t\t\t\t</button>{\" \"}\n\t\t\t\t<button className=\"stats-btn stats-btn-pdf\">Pdf</button>\n\t\t\t</>\n\t\t),\n\t};\n\n\treturn (\n\t\t<div className={`report-asts-anomalies`}>\n\t\t\t<ReportHeading\n\t\t\t\ttitle=\"Meters Anomalies Per User Stats\"\n\t\t\t\tstats={anomalyPerUserStats}\n\t\t\t/>\n\n\t\t\t{/* display main anomalies data */}\n\t\t\t<div className=\"raa-body\">\n\t\t\t\t<StatsCombo statsName=\"Anomaly Summary\">\n\t\t\t\t\t<StatsCard\n\t\t\t\t\t\tstatsName={statsName}\n\t\t\t\t\t\tstats={anomalyPerUserStats}\n\t\t\t\t\t\theaderData={headerDataGeneric}\n\t\t\t\t\t>\n\t\t\t\t\t\t<StatsComboTableAnomalies\n\t\t\t\t\t\t\tstats={anomalyPerUserStats?.stats}\n\t\t\t\t\t\t\ttableRef={tableRef}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</StatsCard>\n\n\t\t\t\t\t{/* <StatsCard\n\t\t\t\t\t\tstatsName={`${statsName} Bar Chart`}\n\t\t\t\t\t\tstats={anomalyPerUserStats}\n\t\t\t\t\t\theaderData={headerDataGeneric}\n\t\t\t\t\t>\n\t\t\t\t\t\t<StatsComboBarChartAnomalies stats={anomalyPerUserStats} />\n\t\t\t\t\t</StatsCard> */}\n\n\t\t\t\t\t{/* <StatsCard\n\t\t\t\t\t\tstatsName={`${statsName} Pie Chart`}\n\t\t\t\t\t\tstats={anomalyPerUserStats}\n\t\t\t\t\t\theaderData={headerDataGeneric}\n\t\t\t\t\t>\n\t\t\t\t\t\t<StatsComboPieChart stats={anomalyPerUserStats} />\n\t\t\t\t\t</StatsCard> */}\n\t\t\t\t</StatsCombo>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default ReportAnomalies;\n","// npm libraries\n// import { useContext } from \"react\";\n\nimport \"@/components/stats/StatsComboTableMeterTypes.css\";\n\n// contexts\n// import { FiltersContext } from \"@/contexts/FiltersContext\";\n// import { AstsStatsContext } from \"@/contexts/AstsStatsContext\";\nimport { capitalizeInitialsString } from \"@/utils/utils\";\n\n// components\nimport TableComboData from \"@/components/tables/TableComboData\";\n\nconst StatsComboTableMeterTypes = (props) => {\n\t// Get asts anomalies from the astsStatsContext\n\tconst { stats, tableRef } = props;\n\t// console.log(`stats`, stats);\n\n\tlet columnDefinitions = [\n\t\t{\n\t\t\tfield: \"meterTypeName\",\n\t\t\theaderName: \"Meter Type\",\n\t\t\twidth: \"110\",\n\t\t\t// flex: 3,\n\t\t},\n\t];\n\n\tlet meterTypeData = [];\n\n\tstats?.forEach((meterType) => {\n\t\t// console.log(`meterType`, meterType);\n\n\t\tlet users = {};\n\t\tmeterType?.stats?.forEach((user) => {\n\t\t\tconst result = columnDefinitions.some(\n\t\t\t\t(fw) => fw?.valueGetterParam?.uid === user.uid\n\t\t\t);\n\n\t\t\tusers[user.uid] = {\n\t\t\t\tuser: user,\n\t\t\t};\n\n\t\t\tif (!result) {\n\t\t\t\tcolumnDefinitions.push({\n\t\t\t\t\tfield: `users.${user.uid}.user.quantity`,\n\t\t\t\t\theaderName: capitalizeInitialsString(user.displayName),\n\t\t\t\t\twidth: \"58\",\n\t\t\t\t\t// flex: 1,\n\t\t\t\t\theaderTooltip: user.displayName,\n\t\t\t\t\tvalueGetter: (params) => {\n\t\t\t\t\t\t// console.log(`params`, params);\n\t\t\t\t\t\tconst value = params.data?.users[user?.uid]?.user?.quantity;\n\t\t\t\t\t\treturn value ? value : 0;\n\t\t\t\t\t},\n\t\t\t\t\tvalueGetterParam: {\n\t\t\t\t\t\tuid: user.uid,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\tmeterTypeData.push({\n\t\t\tmeterTypeName: meterType.meterTypeName,\n\t\t\ttotal: meterType.total,\n\t\t\tusers,\n\t\t});\n\t\t// console.log(`userData`, userData);\n\t\t// });\n\t});\n\n\t// console.log(`anomalyData`, anomalyData);\n\t// console.log(`columnDefinitions`, columnDefinitions);\n\n\tcolumnDefinitions.push({\n\t\tfield: \"total\",\n\t\theaderName: \"Total\",\n\t\twidth: \"100\",\n\t\t// flex: 2,\n\t\tcellRenderer: (params) => {\n\t\t\t// console.log(`params.value`, params.value);\n\t\t\treturn params.value ? params.value : 0;\n\t\t},\n\t});\n\n\t// console.log(`meterTypeData`, meterTypeData);\n\t// console.log(`columnDefinitions`, columnDefinitions);\n\n\treturn (\n\t\t<div className=\"stats-combo-table-meter-type\">\n\t\t\t<TableComboData\n\t\t\t\trowData={meterTypeData}\n\t\t\t\tcolDefs={columnDefinitions}\n\t\t\t\ttableRef={tableRef}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nexport default StatsComboTableMeterTypes;\n","import { AgCharts } from \"ag-charts-react\";\n\nimport \"@/components/stats/StatsComboBarChartMeterType.css\";\n\nconst StatsComboBarChartMeterType = (props) => {\n\t// console.log(`props`, props);\n\n\t// get stats from props\n\tconst { userData, barChartSeries } = props?.stats;\n\n\tconst options = {\n\t\ttitle: {\n\t\t\ttext: \"Meter Type Per User\",\n\t\t},\n\t\tsubtitle: {\n\t\t\ttext: \"Pre-paid/Conventional\",\n\t\t},\n\t\tdata: userData,\n\t\tseries: barChartSeries,\n\t};\n\n\treturn (\n\t\t<div className=\"stats-combo-bar-chart\">\n\t\t\t<AgCharts options={options} />\n\t\t</div>\n\t);\n};\n\nexport default StatsComboBarChartMeterType;\n","// npm libraries\nimport { useContext, useRef } from \"react\";\n\nimport { ModuleRegistry } from \"@ag-grid-community/core\";\nimport { ClientSideRowModelModule } from \"@ag-grid-community/client-side-row-model\";\nimport \"@ag-grid-community/styles/ag-grid.css\";\nimport \"@ag-grid-community/styles/ag-theme-quartz.css\";\nimport { CsvExportModule } from \"@ag-grid-community/csv-export\";\n\nModuleRegistry.registerModules([ClientSideRowModelModule]);\nModuleRegistry.registerModules([CsvExportModule]);\n\nimport \"@/components/reports/ReportAstsMeterType.css\";\n\n// contexts\nimport { AstsStatsContext } from \"@/contexts/AstsStatsContext\";\n\nimport ReportHeading from \"@/components/reports/ReportHeading\";\nimport StatsCombo from \"@/components/stats/StatsCombo\";\nimport StatsComboTableMeterTypes from \"@/components/stats/StatsComboTableMeterTypes\";\nimport StatsComboBarChartMeterType from \"@/components/stats/StatsComboBarChartMeterType\";\nimport StatsComboPieChart from \"@/components/stats/StatsComboPieChart\";\nimport StatsCard from \"@/components/stats/StatsCard\";\n\nimport { capitalizeInitialsString } from \"@/utils/utils\";\n\nconst ReportAstsMeterType = () => {\n\tconst { astsStatsContext } = useContext(AstsStatsContext);\n\t// console.log(`astsStatsContext`, astsStatsContext);\n\n\tconst tableRef = useRef();\n\n\tconst { meterTypePerUserStats, anomaliesStats } = astsStatsContext;\n\t// console.log(`meterTypePerUserStats`, meterTypePerUserStats);\n\t// console.log(`anomaliesStats`, anomaliesStats);\n\n\tconst barChartSeries = [];\n\tlet userData = [];\n\tmeterTypePerUserStats?.forEach((item) => {\n\t\t// console.log(`item`, item);\n\n\t\tlet data = {\n\t\t\tmeterTypeName: item.meterTypeName,\n\t\t};\n\n\t\titem?.stats?.forEach((user) => {\n\t\t\t// console.log(`user`, user);\n\t\t\t// if the user exist already, dont add\n\t\t\tconst result = barChartSeries.some((fw) => fw.uid === user.uid);\n\t\t\tif (!result) {\n\t\t\t\tconst seriesBar = {\n\t\t\t\t\ttype: \"bar\",\n\t\t\t\t\txKey: \"meterTypeName\",\n\t\t\t\t\tyKey: user.uid,\n\t\t\t\t\tyName: capitalizeInitialsString(user.displayName),\n\t\t\t\t\tuid: user.uid,\n\t\t\t\t};\n\t\t\t\tbarChartSeries.push(seriesBar);\n\t\t\t}\n\t\t\tdata = { ...data, [user.uid]: user.quantity };\n\t\t});\n\t\t// console.log(`data`, data);\n\t\tuserData.push(data);\n\t});\n\t// console.log(`barChartSeries`, barChartSeries);\n\t// console.log(`userData`, userData);\n\n\tconst statsData = {\n\t\tuserData,\n\t\tbarChartSeries,\n\t};\n\n\tconst statsName = \"Meter Type Summary\";\n\n\tconst handleClick = (e) => {\n\t\t// console.log(`export btn clicked`, e.target.value);\n\t\t// console.log(`tableRef`, tableRef);\n\t\ttableRef.current?.api?.exportDataAsCsv();\n\t};\n\n\tconst headerDataGeneric = {\n\t\thl1: \"hl1\",\n\t\thl2: \"\",\n\t\thr1: \" \",\n\t\thr2: (\n\t\t\t<>\n\t\t\t\t<button onClick={handleClick} className=\"stats-btn stats-btn-export\">\n\t\t\t\t\tExport\n\t\t\t\t</button>{\" \"}\n\t\t\t\t<button className=\"stats-btn stats-btn-pdf\">Pdf</button>\n\t\t\t</>\n\t\t),\n\t};\n\n\treturn (\n\t\t<div className={`report-asts-meter-type`}>\n\t\t\t{/* <ReportHeading\n\t\t\t\ttitle=\"Meters Type Per User Stats\"\n\t\t\t\tstats={meterTypePerUserStats}\n\t\t\t/> */}\n\n\t\t\t<div className=\"ramt-body\">\n\t\t\t\t<StatsCombo statsName=\"Meter Type Summary\">\n\t\t\t\t\t<StatsCard\n\t\t\t\t\t\tstatsName={`${statsName}`}\n\t\t\t\t\t\tstats={statsData}\n\t\t\t\t\t\theaderData={headerDataGeneric}\n\t\t\t\t\t>\n\t\t\t\t\t\t<StatsComboTableMeterTypes\n\t\t\t\t\t\t\tstats={meterTypePerUserStats}\n\t\t\t\t\t\t\ttableRef={tableRef}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</StatsCard>\n\n\t\t\t\t\t<StatsCard\n\t\t\t\t\t\tstatsName={`${statsName} Bar Chart`}\n\t\t\t\t\t\tstats={statsData}\n\t\t\t\t\t\theaderData={headerDataGeneric}\n\t\t\t\t\t>\n\t\t\t\t\t\t<StatsComboBarChartMeterType stats={statsData} />\n\t\t\t\t\t</StatsCard>\n\n\t\t\t\t\t{/* <StatsCard\n\t\t\t\t\t\tstatsName={`${statsName} Pie Chart`}\n\t\t\t\t\t\tstats={statsData}\n\t\t\t\t\t\theaderData={headerDataGeneric}\n\t\t\t\t\t>\n\t\t\t\t\t\t<StatsComboPieChart stats={statsData} />\n\t\t\t\t\t</StatsCard> */}\n\t\t\t\t</StatsCombo>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default ReportAstsMeterType;\n","// nom libraries\r\n\r\n// css\r\nimport \"@/components/asts/AstsMain.css\";\r\n\r\n// components\r\nimport AstsTable from \"@/components/asts/AstsTable\";\r\nimport ReportAstsUsers from \"@/components/reports/ReportAstsUsers\";\r\nimport ReportAstsAnomalies from \"@/components/reports/ReportAstsAnomalies\";\r\n// import ReportAstsVending from \"@/components/reports/ReportAstsVending\";\r\nimport ReportAstsMeterType from \"@/components/reports/ReportAstsMeterType\";\r\nimport Report from \"@/components/reports/Report\";\r\n\r\nconst AstsMain = ({ asts, astsTableFields, tableRef }) => {\r\n\treturn (\r\n\t\t<div className=\"asts-main\">\r\n\t\t\t<AstsTable\r\n\t\t\t\tasts={asts}\r\n\t\t\t\tastsTableFields={astsTableFields}\r\n\t\t\t\ttableRef={tableRef}\r\n\t\t\t/>\r\n\t\t\t<Report reportName=\"users\">\r\n\t\t\t\t<ReportAstsUsers />\r\n\t\t\t</Report>\r\n\t\t\t<Report reportName=\"anomalies\">\r\n\t\t\t\t<ReportAstsAnomalies />\r\n\t\t\t</Report>\r\n\t\t\t{/* <Report reportName=\"vending\">\r\n\t\t\t\t<ReportAstsVending />\r\n\t\t\t</Report> */}\r\n\t\t\t<Report reportName=\"meterType\">\r\n\t\t\t\t<ReportAstsMeterType />\r\n\t\t\t</Report>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default AstsMain;\r\n"],"names":["ModuleRegistry","ClientSideRowModelModule","TableAsts","props","rowData","colDefs","tableRef","gridApiRef","useRef","user","useAuthContext","email","displayName","defaultColDef","useMemo","getRowId","params","onGridReady","onFirstDataRendered","rowClassRules","_a","jsx","AgGridReact","TableCustomNoRowsOverlay","AstsTable","asts","astsTableFields","ReportHeading","stats","total","filtersContext","useContext","FiltersContext","createdAtDatetimeRange","updatedAtDatetimeRange","filterCondition","astsContext","AstsContext","createdAt","updatedAt","range","_b","astsClone","cloneDeep","a","b","dateA","dateB","_d","_c","_f","_e","date1","date2","format","constants","title","jsxs","TableAstsUsers","ReportAstsUsersTable","data","tableFields","ReportAstsUsersBarChart","chartOptions","setChartOptions","useState","useEffect","AgCharts","ReportAstsUsers","astsStatsContext","AstsStatsContext","users","StatsComboTableAnomalies","columnDefinitions","anomalyData","anomaly","adsa","item","anomalyFieldName","userObj","fw","capitalizeInitialsString","value","TableComboData","CsvExportModule","ReportAnomalies","anomalyPerUserStats","handleClick","e","statsName","headerDataGeneric","Fragment","StatsCombo","StatsCard","StatsComboTableMeterTypes","meterTypeData","meterType","result","StatsComboBarChartMeterType","userData","barChartSeries","options","ReportAstsMeterType","meterTypePerUserStats","anomaliesStats","seriesBar","statsData","AstsMain","Report","ReportAstsAnomalies"],"mappings":"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"}